#+TITLE: Breve introducción a Julia
#+AUTHOR: Adrián Arroyo Calle
#+EMAIL: adrian.arroyo.calle@uva.es
#+DATE: Curso 2023-2024
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: es
#+OPTIONS:   H:2 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:https://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+HTML_LINK_UP:
#+HTML_LINK_HOME:
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger]
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+latex_header: \mode<beamer>{\usetheme{Madrid}}

* Breve introducción a Julia

** Julia

#+ATTR_LATEX: :width 0.4\textwidth
[[./julia.png]]

- Lenguaje de alto rendimiento para aplicaciones científicas.
- Sintaxis y semántica similar a Python.
- Pero con rendimiento más cercano a C o FORTRAN.
- Relativamente reciente

** Descargar Julia

https://julialang.org/

** Ejecutar programas

*** Ejecutar programa en Julia
#+begin_src julia
$ julia script.jl
#+end_src

*** Abrir REPL
#+begin_src julia
$ julia
#+end_src

** Variables

- Asignamos variables con ~=~.
- Las variables son mutables.
- Julia es tipado pero existe *inferencia de tipos*.
#+begin_src julia
a = 14
b = false
c = "cadena de texto"
#+end_src

** Vectores y matrices
- Podemos crear vectores y matrices rellenos de ceros con ~zeros~.
- Vectores de 1D y 2D tienen sintaxis especiales.
- Los elementos se enumeran empezando por 1 y acabando en ~end~.
- Podemos obtener las dimensiones con ~size~ o ~length~.

** Vectores y matrices

#+begin_src julia
a = zeros(2,2)
a[1,1] = 5
a[1,2] = 6
a[end,2] = 8
a[end,end] = 10
julia> a
2×2 Matrix{Float64}:
 5.0   6.0
 0.0  10.0
#+end_src

** Vectores y matrices
#+begin_src julia
  a = [1,2,3,4] # 4-element Vector{Int64}
  a = [1 2;3 4] # 2x2 Matrix{Int64}
  length(a) # 4
  size(a, 1) # 2
  size(a, 2) # 2
  a[:,1] # 1 3
  a[1,:] # 1 2
#+end_src

** Estructuras de control

- Condicionales con if/elseif/else/end
- Bucles con while/end y for in

#+begin_src julia
a = 18
if a > 18
  println("Mayor de 18")
else
  println("Menor o igual a 18")
end
#+end_src

** Estructuras de control

#+begin_src julia
a = [1, 2, 3]
suma = 0
n = 1
while n <= length(a)
  suma += a[n]
  n += 1
end
#+end_src

** Estructuras de control

#+begin_src julia
a = [1, 2, 3]
suma = 0
for i in a
  suma += i
end
#+end_src

** List comprehensions y rangos

- Podemos expresar rangos con ~A:B~ donde A es el inicio y B el final.
- Podemos generar nuevas listas de forma compacta con list comprehensions

#+begin_src julia
[i^2 for i in 1:10 if i % 2 == 0] # [4, 16, 36, 64, 100]
#+end_src

** Funciones

- Las funciones se definen con la palabra ~function~
- Opcionalmente se pueden anotar con tipos
- La última expresión es el valor de return. También se pueden hacer ~return~ explícitos.

#+begin_src julia
function suma(a, b)
  a + b
end
#+end_src

** Vectorización

- En Julia las funciones soportan /vectorización/.
- Una función que trabaja con un elemento individual se puede hacer que trabaje con N elementos.
- Se usa el punto para hacer la transformación.

#+begin_src julia
cos(0) # 1.0
cos.([0, 0.5, pi, 2*pi]) # [1.0, 0.8775, -1.0, 1.0]
[1, 2, 3] .+ 1 # [2, 3, 4]
#+end_src

** Extra

- Algunas funciones están en módulos que hay que importar con ~using~.
- Podemos generar matrices aleatorias con ~rand~.
- Si usamos números aleatorios es importante usar una /seed/ para tener resultados reproducibles.
- Podemos importar archivos Julia desde el REPL con ~include~.

#+begin_src julia
include("fichero.jl")
using Random
Random.seed!(0)
a = rand(10, 10) # Matriz aleatoria 10x10
#+end_src
